# 1.0 K-means clustering with 8 clusters of sizes 206, 253, 4, 287, 264, 105, 99, 242

> set.seed(1)
> km <- kmeans(df, centers = 8, nstart = 25)
> km

Cluster means:
        LotArea OverallQual OverallCond  YearBuilt YearRemodAdd       MoSold      YrSold  SalePrice   price_sqft
1 -0.0005503441   0.5143647 -0.33816819  0.8269043   0.63806355 -0.569740153  0.95748053  0.3159126  0.035278930
2  0.0738500167   0.6312503 -0.43532860  0.9044551   0.73573665  0.370684698 -0.75112964  0.4235326 -0.001087141
3 15.3283850248   0.1089554  0.15695331 -0.2158007  -0.01771597  0.065867904 -0.04950957  1.4452755 -1.549579850
4 -0.0482502088  -0.5605750 -0.01604169 -0.5216589  -0.99615871  0.683827481 -0.50928626 -0.4950693 -0.475119841
5 -0.0356442850  -0.8441792 -0.44554035 -0.7485610  -1.16442345 -0.699097982  0.42394136 -0.7370825 -0.595864111
6  0.3117154786   1.8494824 -0.41432155  1.0011274   0.93556882  0.236714288  0.01682245  2.4568133  0.758833334
7 -0.7569808149   0.3006779 -0.29917184  0.6897748   0.46004823 -0.111596709 -0.08943917 -0.2374449  2.882684805
8 -0.0595675489  -0.4393211  1.54760893 -0.9271739   0.54551338 -0.009023861  0.14184135 -0.3132088 -0.298305246

Clustering vector:
   [1] 1 8 2 5 2 4 6 4 5 5 5 6 4 2 5 8 5 4 1 5 2 4 2 8 8 1 8 1 4 5 5 8 1 5 6 2 1 8 8 5 4 4 4 4 4 6 1 2 8 5 2 4 5 6 5 4 7 2 6 5 2 8
  [63] 2 5 1 6 1 2 5 4 1 8 2 8 5 7 5 5 5 5 5 2 2 4 1 2 1 7 5 4 4 4 8 8 2 8 2 5 5 5 1 1 5 1 4 2 8 5 8 1 4 1 6 4 8 7 4 2 1 2 4 5 4 1
 [125] 1 8 5 4 4 8 4 1 8 1 4 4 4 2 2 1 5 2 5 1 4 7 8 1 1 5 5 6 4 8 5 5 4 1 1 2 1 6 1 5 8 8 4 6 2 2 5 5 7 5 2 8 2 4 6 8 7 4 8 1 8 6
 [187] 1 8 5 7 8 8 1 7 8 7 2 2 5 1 1 5 4 1 5 1 5 5 2 4 5 1 1 2 1 8 1 4 8 7 2 2 5 5 6 7 2 7 5 7 5 6 7 5 1 7 1 1 6 5 1 8 5 5 1 2 8 4
 [249] 2 3 5 7 2 8 5 2 1 1 1 4 5 2 8 8 5 4 2 8 5 8 2 8 1 8 8 8 1 5 6 1 1 2 1 2 2 7 8 4 5 8 2 8 5 2 4 2 4 2 4 8 4 2 2 4 8 6 2 5 5 6
 [311] 2 8 4 3 8 1 1 2 1 1 6 6 2 8 1 4 6 4 8 5 4 4 6 2 2 3 6 2 2 8 1 5 5 6 5 4 8 4 7 6 6 2 5 8 4 2 1 4 4 2 4 4 1 7 4 8 5 4 5 8 2 5
 [373] 1 4 2 5 2 6 6 1 5 2 2 5 2 7 5 4 2 6 8 1 4 5 4 5 4 4 4 2 2 2 8 2 2 5 5 8 2 6 5 5 7 5 2 2 8 4 5 5 2 8 5 6 5 8 1 4 2 1 7 8 7 2
 [435] 8 1 4 8 8 8 6 4 8 7 2 4 1 2 4 8 8 2 2 1 4 4 5 8 8 5 6 8 4 8 4 7 5 8 2 1 1 4 7 6 7 4 1 6 6 8 6 6 7 2 8 8 4 5 5 7 7 4 2 4 8 4
 [497] 6 4 8 8 7 1 4 8 7 5 2 1 8 5 8 2 4 4 5 6 4 1 2 8 8 4 4 2 2 2 8 6 8 5 2 8 8 5 2 8 2 5 4 1 6 2 1 2 2 2 4 8 8 2 4 5 1 5 2 4 4 4
 [559] 2 7 8 4 4 4 2 5 6 1 6 4 4 4 1 2 8 4 4 4 7 4 4 1 2 8 8 6 8 4 8 4 2 6 8 1 5 6 8 7 4 7 2 4 2 7 2 1 4 8 6 5 6 4 2 2 7 5 2 5 6 6
 [621] 5 8 4 7 4 5 4 5 4 5 8 7 5 8 1 8 5 4 5 7 1 2 6 5 6 5 5 5 5 4 1 4 1 8 6 7 8 8 5 8 4 6 5 5 6 2 4 2 4 4 1 5 4 8 4 7 5 8 6 4 1 8
 [683] 7 6 1 7 2 2 6 2 1 6 2 4 5 2 4 4 8 7 2 4 6 8 1 5 3 6 2 4 8 5 7 4 8 4 8 4 6 4 2 1 8 5 6 4 8 1 5 5 1 2 2 5 5 4 4 2 1 1 8 8 2 8
 [745] 2 8 1 8 1 5 8 2 2 2 8 7 1 1 7 2 4 4 1 6 2 6 1 8 2 6 5 5 5 4 6 1 2 4 4 4 2 2 1 4 8 4 5 1 8 8 7 4 2 2 2 1 5 5 6 4 1 8 2 6 4 2
 [807] 4 8 4 4 2 1 5 5 4 1 4 2 8 1 1 5 2 4 2 6 5 1 5 7 5 7 1 5 4 8 4 7 1 8 8 8 8 4 8 5 1 4 8 8 2 7 4 4 4 8 4 1 1 8 8 5 1 5 1 4 2 5
 [869] 4 1 5 1 8 4 5 6 5 6 8 8 2 2 2 5 5 7 2 5 2 5 8 1 8 5 5 4 5 5 6 8 4 8 2 2 4 5 2 8 4 1 5 8 4 4 7 5 4 5 2 8 2 8 2 2 2 5 2 5 1 2
 [931] 1 5 6 1 8 4 1 1 2 5 4 1 4 5 5 8 5 2 2 1 8 4 8 4 4 4 7 5 2 7 8 8 7 1 1 2 5 4 5 5 4 7 5 2 8 7 4 7 5 5 8 6 7 1 4 4 8 6 4 2 6 8
 [993] 8 2 6 4 5 5 5 1
 [ reached getOption("max.print") -- omitted 460 entries ]

Within cluster sum of squares by cluster:
[1]  534.70762  769.49498   61.63655 1067.11223 1162.54249  539.62191  476.32362 1092.17982
 (between_SS / total_SS =  56.6 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"    "size"         "iter"        
[9] "ifault"      

======================================================================================================

# 2.0 K-means clustering with 5 clusters of sizes 4, 225, 409, 534, 288

> set.seed(1)
> km <- kmeans(df, centers = 5, nstart = 25)
> km

Cluster means:
      LotArea OverallQual OverallCond  YearBuilt YearRemodAdd      MoSold      YrSold  SalePrice  price_sqft
1 15.32838502   0.1089554   0.1569533 -0.2158007  -0.01771597  0.06586790 -0.04950957  1.4452755 -1.54957985
2 -0.15648220   1.2843420  -0.4411380  0.9704355   0.80861795  0.27217519 -0.03863351  1.3240235  1.48830759
3  0.06642109   0.5151285  -0.4049680  0.8769106   0.68639584 -0.12359059 -0.02511668  0.3007727 -0.03923245
4 -0.07507383  -0.7258221  -0.3049853 -0.6163066  -1.09620853 -0.02902476 -0.03893432 -0.6514355 -0.46048040
5 -0.04577030  -0.3906642   1.4830634 -0.8577552   0.42628917  0.01578085  0.13872995 -0.2737358 -0.23169543

Clustering vector:
   [1] 3 5 3 4 3 3 2 3 4 4 4 2 4 2 4 5 5 4 3 4 2 4 3 5 5 3 5 2 5 4 4 5 3 4 2 2 3 5 5 4 4 4 5 4 4 2 3 3 5 4 3 4 4 3 4 4 2 3 2 5 3 5
  [63] 2 4 3 2 3 3 4 4 3 5 3 5 4 4 4 4 4 4 4 3 2 4 3 3 3 3 4 4 4 4 5 5 3 5 3 4 4 4 5 3 4 3 4 2 5 4 5 3 4 3 2 4 5 2 4 3 3 3 4 4 4 3
 [125] 3 5 4 4 4 5 4 3 5 2 5 4 4 3 2 3 4 3 4 3 4 2 5 3 3 4 4 2 4 5 4 4 4 3 3 3 3 2 3 4 5 5 4 2 3 3 4 4 2 4 3 5 3 4 2 5 2 4 5 3 5 5
 [187] 3 5 4 2 5 5 3 2 5 2 2 3 4 3 3 4 4 3 4 3 4 4 3 5 4 3 3 3 5 5 3 4 5 2 3 3 4 4 2 2 2 2 4 2 4 2 4 4 3 4 3 3 2 4 2 5 4 4 3 3 5 4
 [249] 3 1 4 2 3 5 4 3 3 3 3 4 4 2 5 5 4 3 3 5 4 5 2 5 3 5 5 5 3 4 2 3 3 3 2 2 3 3 5 4 4 5 3 5 4 3 4 3 4 3 4 5 4 3 3 5 5 2 3 4 4 2
 [311] 3 5 4 1 5 3 5 2 3 3 2 2 2 5 5 4 2 4 5 4 4 5 2 3 3 1 2 3 3 5 3 4 4 2 4 4 5 4 2 2 2 2 4 5 4 3 3 4 4 3 4 4 3 5 4 5 4 4 4 5 3 4
 [373] 3 4 3 4 3 2 2 3 4 3 3 4 3 2 4 4 3 2 5 3 4 4 4 4 4 4 4 2 3 3 5 3 3 4 4 5 3 2 4 4 2 4 3 3 5 4 4 4 3 5 4 2 4 5 3 4 3 3 4 5 2 3
 [435] 5 3 5 5 5 5 2 4 5 2 3 4 5 3 4 5 5 3 3 3 4 3 4 5 5 4 2 5 4 5 4 2 4 5 3 3 3 3 3 2 2 4 3 2 2 5 2 2 5 3 5 5 4 4 4 5 4 4 3 4 5 4
 [497] 2 4 5 5 2 3 4 5 2 4 3 3 5 4 5 3 4 3 4 2 4 3 3 5 5 4 4 3 2 3 5 2 5 4 3 5 5 4 3 5 3 4 4 3 2 3 3 3 3 3 4 5 5 2 4 4 3 4 2 4 4 4
 [559] 3 2 5 4 4 4 3 4 2 3 2 4 4 4 3 3 5 4 5 4 3 4 5 3 3 5 5 2 5 4 5 4 3 2 5 3 4 2 5 2 4 2 2 4 3 2 3 3 3 5 2 4 2 4 2 3 4 5 3 4 2 2
 [621] 4 5 4 2 4 4 4 4 4 4 5 2 4 5 3 5 4 4 4 2 3 3 2 4 2 4 4 4 4 4 3 4 3 5 2 4 5 5 4 5 5 3 4 4 2 3 4 3 5 4 3 4 4 5 4 2 4 5 2 4 4 5
 [683] 2 2 3 2 3 3 2 3 3 2 3 4 4 3 4 4 5 2 3 4 2 5 3 4 1 2 3 5 5 4 2 4 5 4 5 5 2 4 2 3 5 4 2 4 5 3 4 4 2 3 3 4 4 5 4 3 3 3 5 5 3 5
 [745] 2 5 3 5 3 4 5 3 3 3 5 2 3 4 2 2 4 4 3 2 2 3 3 5 3 2 4 4 4 4 2 3 3 4 4 4 3 3 3 4 5 4 4 3 5 5 2 4 3 3 3 3 4 4 2 4 3 5 3 2 4 3
 [807] 4 5 4 4 3 3 4 4 4 3 4 3 5 2 3 4 3 4 3 2 4 3 4 2 4 2 3 4 4 5 4 2 3 5 5 5 5 4 5 4 3 4 5 5 3 2 4 4 4 5 4 3 3 5 5 4 3 4 3 4 2 4
 [869] 4 3 4 3 5 4 4 2 4 2 5 5 3 3 3 4 4 2 3 4 3 4 5 4 5 4 4 4 4 4 2 5 4 5 3 3 4 4 3 5 4 3 4 5 4 4 2 4 4 4 3 5 3 5 3 3 3 4 3 4 3 3
 [931] 3 4 2 3 5 4 3 3 3 5 4 3 4 4 4 5 4 3 3 5 5 4 5 4 4 4 2 4 3 2 5 5 2 3 3 3 4 4 4 4 4 2 4 3 5 2 4 2 4 4 5 2 2 3 4 4 5 2 4 3 2 5
 [993] 5 3 2 4 4 4 4 3
 [ reached getOption("max.print") -- omitted 460 entries ]

Within cluster sum of squares by cluster:
[1]   61.63655 1577.54545 1505.55457 2596.72703 1508.82803
 (between_SS / total_SS =  44.8 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"    "size"         "iter"        
[9] "ifault"      